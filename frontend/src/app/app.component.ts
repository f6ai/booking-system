/************************************************************************
 *                                                                      *
 * DO NOT EDIT THIS FILE                                                *
 * CREATE YOUR OWN ENTRY MODULE LIKE THE "GUIDE MODULE"                 *
 *                                                                      *
 * KEEP THE APP MODULE CLEAN                                            *
 *                                                                      *
 * NOTE: Your entry module does not necessarily have to be lazy loaded  *
 *                                                                      *
 ************************************************************************/

import { Component, OnDestroy, OnInit, } from '@angular/core';
import {
  SmartButtonSlotItem,
  SmartHeaderService,
  SmartSlotItem
} from '@r-software/smart-ng';
import { filter, takeUntil, tap } from 'rxjs/operators';
import { Subject } from 'rxjs';

import { SmartHeaderBaseSlotInfoComponent } from './core/components/smart-header-base-slot-info.component';
import { SmartHeaderBaseSlotButtonComponent } from './core/components/smart-header-base-slot-button.component';
import { BaseSlotButtonInputType } from './core/models/base-slot-button-input.type';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit, OnDestroy {
  slotItems: SmartSlotItem;
  buttonSlotItems: SmartButtonSlotItem[];

  private unsubscribe$: Subject<boolean> = new Subject<boolean>();

  constructor(private headerService: SmartHeaderService) {
  }

  ngOnInit(): void {
    const [textTemplate$, textOnly$, buttons$] = this.headerService.__slotSource__;

    textTemplate$
      .pipe(
        // @ts-ignore
        filter(slot => !!slot),
        takeUntil(this.unsubscribe$)
      )
      .subscribe(slot => {
        const [component, data] = slot;
        this.slotItems = new SmartSlotItem(component, data);
      });

    textOnly$
      .pipe(
        // @ts-ignore
        tap(isDefined => {
          if (!isDefined) {
            this.headerService.destroyInfoSlot();
          }
          return isDefined;
        }),
        filter(text => !!text),
        takeUntil(this.unsubscribe$)
      )
      .subscribe(text => {
        this.headerService.setTemplateInfoSlot([SmartHeaderBaseSlotInfoComponent, {text}]);
      });

    buttons$
      .pipe(
        // @ts-ignore
        takeUntil(this.unsubscribe$)
      )
      .subscribe(slots => {
        const data = slots;
        const temp: any = [];
        data.forEach((entry: BaseSlotButtonInputType) => temp.push(new SmartButtonSlotItem(SmartHeaderBaseSlotButtonComponent, entry)));
        this.buttonSlotItems = [...temp];
      });
  }

  ngOnDestroy(): void {
    this.unsubscribe$.next(true);
    this.unsubscribe$.complete();
  }

}
